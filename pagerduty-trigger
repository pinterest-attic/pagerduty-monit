#!/bin/bash
#
# pagerduty-trigger is a wrapper around the PagerDuty API to open a new
# incident from the command line. This script is designed to help integrate
# monit with PagerDuty.
#
# Copyright (c) 2012 Cold Brew Labs, Inc. See LICENSE for details.
#
# Uncomment and enter your service key here.
# PAGERDUTY_SERVICE_KEY="1234567890abcdef1234567890abcdef"

PAGERDUTY_PATHS="/usr/bin/pagerduty /usr/local/bin/pagerduty"

if [ -z "$1" ]; then
  echo "Usage: $0 <event>"
  exit 1
fi
if [ -z "$PAGERDUTY_SERVICE_KEY" ]; then
  echo "Failed to resolve event: you must set the PAGERDUTY_SERVICE_KEY variable."
  exit 1
fi

for binpath in $PAGERDUTY_PATHS; do
  if [ -x $binpath ]; then
    pagerduty_cmd=$binpath
    break
  fi
done

if [ -z $pagerduty_cmd ]; then
  echo "Could not trigger event: no pagerduty found in ${PAGERDUTY_PATHS}";
fi

EVENT="$1"
HOST=`hostname -s`
INCIDENT_KEY=`echo "$HOST:$EVENT" | md5sum | cut -f 1 -d ' '`
TMP_FILE="/tmp/pagerduty-$INCIDENT_KEY"

if [ -f "$TMP_FILE" ]; then
  # re-trigger after 4 hrs 1 min (the extra minute is to ensure the incident auto-resolved with PagerDuty)
  if [ "$(( $(date +"%s") - $(stat -c "%Y" $TMP_FILE) ))" -lt "14460" ]; then
    echo "$TMP_FILE exists, aborting"
    exit 0
  else
    echo "$TMP_FILE exists but is older than 4 hours; re-triggering"
  fi
fi

DESCRIPTION="$EVENT failed on $HOST"
DATE=`date`

echo "$DATE: $DESCRIPTION" >> $TMP_FILE
/usr/local/bin/pagerduty -k "$PAGERDUTY_SERVICE_KEY" -i "$INCIDENT_KEY" --description="$DESCRIPTION" trigger

if [ "$?" -ne "0" ]; then
  echo "Failed to trigger incident"
  exit 1
fi

echo "Incident triggered successfully"
exit 0
